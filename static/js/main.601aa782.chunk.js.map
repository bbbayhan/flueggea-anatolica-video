{"version":3,"sources":["plantImages/MapNameToImage.js","plantImages/FlueggeaAnatolica.jpeg","plantImages/LathyrusTrachycarpus.jpeg","plantImages/CentaureaRhizocalathium.jpeg","plantImages/GentianaLutea2.png","plantImages/AnemoneBlanda.jpeg","plantImages/CentaureasDavisii.jpeg","plantImages/CampanulaAghrica.jpg","plantImages/CentaureaTchihatcheffii.jpeg","plantImages/LathyrusUndulatos.jpeg","utilities.js","EyeDetection.jsx","Plant.jsx","Map.jsx","App.js","reportWebVitals.js","index.js"],"names":["IMAGE_SRC","drawMesh","predictions","ctx","length","forEach","prediction","plantImage","Image","keypointsLeftEyeLower","annotations","leftEyeLower3","keypointsLeftEyeBrowUpper","leftEyebrowUpper","keypointsRightEyeUpper","rightEyebrowUpper","imageWidth","imageHeight","plantImageSrc","imageIndex","Math","floor","random","Object","values","displayRandomImage","onload","xUpperLEFT","yUpperLEFT","xUpperRIGHT","yUpperRIGHT","beginPath","drawImage","closePath","fill","stroke","src","EyeDetection","webcamRef","useRef","canvasRef","useState","color","setColor","enableButton","setEnableButton","runFacemesh","a","facemesh","inputResolution","width","height","scale","net","setInterval","detect","current","video","readyState","videoWidth","videoHeight","estimateFaces","face","getContext","className","to","style","backgroundColor","onMouseEnter","onMouseLeave","fontSize","textDecoration","fontWeight","fontFamily","marginLeft","ref","position","marginRight","left","right","textAlign","zIndex","useStyles","makeStyles","theme","red","palette","getContrastText","margin","spacing","Plant","data","open","setOpen","buttonStyles","classes","videoId","opts","playerVars","autoplay","name","alt","display","flexDirection","justifyContent","city","Tooltip","title","arrow","alignItems","Avatar","iucnDegree","year","marginTop","reason","onClick","mapboxgl","accessToken","mockedData","require","TurkeyMap","props","state","lng","lat","zoom","markers","map","Map","container","this","mapContainer","center","setState","placeholder","document","createElement","ReactDOM","render","Marker","setLngLat","geoLocation","setPopup","Popup","setDOMContent","addTo","el","React","Component","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.601aa782.chunk.js","sourcesContent":["import FlueggeaAnatolica from './FlueggeaAnatolica.jpeg';\nimport LathyrusTrachycarpus from './LathyrusTrachycarpus.jpeg';\nimport CentaureaRhizocalathium from './CentaureaRhizocalathium.jpeg';\nimport GentianaLutea from './GentianaLutea2.png';\nimport AnemoneBlanda from './AnemoneBlanda.jpeg';\nimport CentaureasDavisii from './CentaureasDavisii.jpeg';\nimport CampanulaAghrica from './CampanulaAghrica.jpg';\nimport CentaureaTchihatcheffii from './CentaureaTchihatcheffii.jpeg';\nimport LathyrusUndulatos from './LathyrusUndulatos.jpeg';\n\n\nexport const IMAGE_SRC={\n    \"Flueggea Anatolica\": FlueggeaAnatolica,\n    \"Lathyrus Trachycarpus\": LathyrusTrachycarpus,\n    \"Centaurea Rhizocalathium\" :CentaureaRhizocalathium,\n    \"Gentiana Lutea\": GentianaLutea,\n    \"Anemone Blanda\": AnemoneBlanda,\n    \"Centaureas Davisii\": CentaureasDavisii,\n    \"Campanula Aghrica\" :CampanulaAghrica,\n    \"Centaurea Tchihatcheffii\": CentaureaTchihatcheffii,\n    \"Lathyrus Undulatos\": LathyrusUndulatos,\n}","export default __webpack_public_path__ + \"static/media/FlueggeaAnatolica.c6a478ff.jpeg\";","export default __webpack_public_path__ + \"static/media/LathyrusTrachycarpus.31823c60.jpeg\";","export default __webpack_public_path__ + \"static/media/CentaureaRhizocalathium.26e865d5.jpeg\";","export default __webpack_public_path__ + \"static/media/GentianaLutea2.9c23cb80.png\";","export default __webpack_public_path__ + \"static/media/AnemoneBlanda.19a0d8b8.jpeg\";","export default __webpack_public_path__ + \"static/media/CentaureasDavisii.a4a1e4d6.jpeg\";","export default __webpack_public_path__ + \"static/media/CampanulaAghrica.197ad8b7.jpg\";","export default __webpack_public_path__ + \"static/media/CentaureaTchihatcheffii.f066e066.jpeg\";","export default __webpack_public_path__ + \"static/media/LathyrusUndulatos.3e8cff37.jpeg\";","import {IMAGE_SRC} from './plantImages/MapNameToImage';\n\nexport const displayRandomImage = () => {\n    const imageIndex = Math.floor(Math.random()*9);\n    return Object.values(IMAGE_SRC)[imageIndex];\n}\n\nexport const drawMesh = (predictions, ctx) => {\n    if(predictions.length > 0){\n        predictions.forEach((prediction) =>{\n            const plantImage= new Image();\n            const keypointsLeftEyeLower = prediction.annotations.leftEyeLower3;\n            const keypointsLeftEyeBrowUpper = prediction.annotations.leftEyebrowUpper;\n            const keypointsRightEyeUpper = prediction.annotations.rightEyebrowUpper;\n            const imageWidth = keypointsLeftEyeLower[0][0] - keypointsLeftEyeLower[keypointsLeftEyeLower.length-1][0];\n            const imageHeight = keypointsLeftEyeLower[0][1] - keypointsLeftEyeBrowUpper[keypointsLeftEyeBrowUpper.length-1][1];\n          \n            let plantImageSrc = displayRandomImage();\n\n            plantImage.onload = function(){\n                    const xUpperLEFT = keypointsLeftEyeBrowUpper[5][0];\n                    const yUpperLEFT = keypointsLeftEyeBrowUpper[5][1];\n                    const xUpperRIGHT = keypointsRightEyeUpper[0][0];\n                    const yUpperRIGHT = keypointsLeftEyeBrowUpper[5][1];\n\n                    if(ctx){\n                        ctx.beginPath();\n                        ctx.drawImage(plantImage,xUpperLEFT,yUpperLEFT,imageWidth,4*imageHeight);\n                        ctx.drawImage(plantImage,xUpperRIGHT,yUpperRIGHT,imageWidth,4*imageHeight);\n                        ctx.closePath();\n                        ctx.fill();\n                        ctx.stroke();\n                    }\n                    \n                    \n                //}\n            } \n            plantImage.src=plantImageSrc;\n        });\n    }\n}","import React, { useRef, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as facemesh from \"@tensorflow-models/facemesh\";\nimport Webcam from \"react-webcam\";\nimport { drawMesh } from \"./utilities\";\nimport AddLocation from \"@material-ui/icons/AddLocation\";\n\nfunction EyeDetection() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [color, setColor] = useState(\"#B814E0\");\n  const [enableButton, setEnableButton] = useState(false);\n\n  const runFacemesh = async () => {\n    const net = await facemesh.load({\n      inputResolution: { width: 640, height: 480 },\n      scale: 0.8,\n    });\n    setInterval(() => {\n      detect(net);\n    }, 1000);\n  };\n\n  const detect = async (net) => {\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      const video = webcamRef.current.video;\n      const videoWidth = video.videoWidth;\n      const videoHeight = video.videoHeight;\n\n      video.width = videoWidth;\n      video.height = videoHeight;\n\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n\n      const face = await net.estimateFaces(video);\n      if (face) setEnableButton(true);\n\n      const ctx = canvasRef.current ? canvasRef.current.getContext(\"2d\") : null;\n      drawMesh(face, ctx);\n    }\n  };\n  runFacemesh();\n\n  return (\n    <div className=\"App\">\n      {enableButton ? (\n        <Link to=\"/turkey\">\n          <div\n            style={{ backgroundColor: \"#D7B2F8\" }}\n            onMouseEnter={() => {\n              setColor(\"#791CC9\");\n            }}\n            onMouseLeave={() => {\n              setColor(\"#B814E0\");\n            }}\n          >\n            <AddLocation fontSize=\"large\" style={{ color: color }} />\n            <span\n              style={{\n                textDecoration: \"none\",\n                color: color,\n                fontWeight: \"bold\",\n                fontFamily: \"Avenir\",\n                fontSize: \"2.8rem\",\n                marginLeft: \"1rem\",\n              }}\n            >\n              Flueggea Anatolica\n            </span>\n          </div>\n        </Link>\n      ) : null}\n      <header className=\"App-header\">\n        <Webcam\n          ref={webcamRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zIndex: 9,\n            width: \"100%\",\n            height: \"100%\",\n          }}\n        />\n        <canvas\n          ref={canvasRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zIndex: 9,\n            width: \"100%\",\n            height: \"100%\",\n          }}\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default EyeDetection;\n","import React, { useState } from \"react\";\nimport { IMAGE_SRC } from \"./plantImages/MapNameToImage\";\nimport Youtube from \"react-youtube\";\nimport AddLocation from \"@material-ui/icons/AddLocation\";\nimport CalendarTodayIcon from \"@material-ui/icons/CalendarToday\";\nimport YouTubeIcon from \"@material-ui/icons/YouTube\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { red } from \"@material-ui/core/colors\";\nimport ErrorIcon from \"@material-ui/icons/Error\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\nconst useStyles = makeStyles((theme) => ({\n  red: {\n    color: theme.palette.getContrastText(red[900]),\n    backgroundColor: red[900],\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    fontSize: \"0.4rem\",\n    width: theme.spacing(2),\n    height: theme.spacing(2),\n  },\n}));\n\nexport const Plant = ({ data }) => {\n  const [open, setOpen] = useState(false);\n  const [color, setColor] = useState(\"#7A1DC9\");\n  const buttonStyles = {\n    color: `${color}`,\n  };\n  const classes = useStyles();\n  const opts = {\n    height: \"100%\",\n    width: \"100%\",\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1,\n    },\n  };\n\n  return open ? (\n    <>\n      <Youtube videoId={data.videoId} opts={opts} />\n    </>\n  ) : (\n    <>\n      <img src={IMAGE_SRC[data.name]} width=\"140px\" alt=\"plant_image\" />\n      <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n          <span\n            style={{\n              fontFamily: \"Avenir\",\n              fontSize: \"0.6rem\",\n              color: \"#7A1DC9\",\n            }}\n          >\n            {data.city}\n          </span>\n          <Tooltip title=\"Locación\" arrow>\n            <AddLocation style={{ color: \"#7A1DC9\" }} />\n          </Tooltip>\n        </div>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n          }}\n        >\n          <p\n            style={{\n              color: \"#7A1DC9\",\n              fontFamily: \"Avenir\",\n              fontSize: \"0.6rem\",\n            }}\n          >\n            {data.name}\n          </p>\n          <Tooltip title=\"Categoría de UICN\" arrow>\n            <Avatar className={classes.red}>{data.iucnDegree}</Avatar>\n          </Tooltip>\n        </div>\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n          <span\n            style={{\n              fontFamily: \"Avenir\",\n              fontSize: \"0.6rem\",\n              color: \"#7A1DC9\",\n            }}\n          >\n            {data.year}\n          </span>\n          <CalendarTodayIcon fontSize=\"small\" style={{ color: \"#7A1DC9\" }} />\n        </div>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            marginTop: \"0.5rem\",\n          }}\n        >\n          <span\n            style={{\n              fontFamily: \"Avenir\",\n              fontSize: \"0.6rem\",\n              color: \"#7A1DC9\",\n            }}\n          >\n            {data.reason}\n          </span>\n          <Tooltip title=\"Razon de extinción\" arrow>\n            <ErrorIcon fontSize=\"small\" style={{ color: \"#7A1DC9\" }} />\n          </Tooltip>\n        </div>\n\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n          <YouTubeIcon\n            onClick={() => setOpen(!open)}\n            onMouseEnter={() => {\n              setColor(\"#c83f49\");\n            }}\n            onMouseLeave={() => {\n              setColor(\"#7A1DC9\");\n            }}\n            fontSize=\"large\"\n            style={buttonStyles}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport mapboxgl from \"mapbox-gl\";\nimport {Plant} from './Plant';\nimport \"@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css\";\n\nconst MAPBOX_ACCESS_TOKEN =\n  \"pk.eyJ1IjoiYmVzdGViYXloYW4iLCJhIjoiY2tibm00NDB4MXUyNDJ5bDlqZGZ1ZjNpNCJ9.FP-7Bm0LzNmmnfxgQfzFMw\";\nmapboxgl.accessToken = MAPBOX_ACCESS_TOKEN;\n\n\nconst mockedData = require(\"./mockPlantData.json\");\nclass TurkeyMap extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: 35.6412,\n      lat: 40.0829,\n      zoom: 5.3,\n      markers: [],\n    };\n  }\n  componentDidMount() {\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: \"mapbox://styles/bestebayhan/ckg6d615u4hbd19o8c6reznwr\",\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom,\n    });\n\n    this.setState({\n      markers: mockedData.map((data) => {\n        const placeholder = document.createElement(\"div\");\n        ReactDOM.render(<Plant data={data}/>, placeholder);\n        return new mapboxgl.Marker({ color: \"#b40219\" })\n          .setLngLat(data.geoLocation)\n          .setPopup(new mapboxgl.Popup().setDOMContent(placeholder))\n          .addTo(map)\n      }),\n    });\n  }\n\n  render() {\n    return (\n        <div ref={(el) => (this.mapContainer = el)} className=\"mapContainer\" />\n    );\n  }\n}\n\nexport default TurkeyMap;","import React from 'react';\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport './App.css';\nimport * as tf from '@tensorflow/tfjs';\nimport * as facemesh from '@tensorflow-models/facemesh';\nimport EyeDetection from './EyeDetection';\nimport TurkeyMap from './Map';\n\nfunction App() {\n\n  return (\n      <BrowserRouter>\n        <Switch>\n            <Route exact path=\"/\" render={()=> (<EyeDetection/>)}/>\n            <Route path=\"/turkey\" render={() => (<TurkeyMap/>)}/>\n          </Switch>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}